"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var core_1 = require("@angular/core");
var modal_dialog_1 = require("nativescript-angular/modal-dialog");
var page_1 = require("ui/page");
var RssDataPickerComponent = (function () {
    function RssDataPickerComponent(params, page) {
        var _this = this;
        this.params = params;
        this.page = page;
        this.currentdate = new Date();
        this.dateOptions = ["On", "On or Before", "On Or After", "Between"];
        this.selectedDateOption = 'On';
        this.currentSelectedDateType = "date1";
        this.page.on("unloaded", function () {
            // using the unloaded event to close the modal when there is user interaction
            // e.g. user taps outside the modal page
            _this.params.closeCallback();
        });
    }
    RssDataPickerComponent.prototype.ngOnInit = function () {
        this.datePicker = this.page.getViewById("datePicker");
        this.datePicker.year = this.currentdate.getFullYear();
        this.datePicker.month = this.currentdate.getMonth() + 1;
        this.datePicker.day = this.currentdate.getDate();
        this.datePicker.minDate = new Date(1975, 0, 29);
        this.datePicker.maxDate = new Date(2045, 4, 12);
    };
    RssDataPickerComponent.prototype.selectedIndexChanged = function (args) {
        var picker = args.object;
        this.selectedDateOption = this.dateOptions[picker.selectedIndex];
    };
    RssDataPickerComponent.prototype.showCalendar = function (dt) {
        this.currentSelectedDateType = dt;
    };
    RssDataPickerComponent.prototype.onDateChanged = function (args) {
        if (this.currentSelectedDateType === 'date1') {
            this.selectedDate1 = this._formatDate(args.value);
        }
        else {
            this.selectedDate2 = this._formatDate(args.value);
        }
    };
    RssDataPickerComponent.prototype._formatDate = function (dt) {
        var tmpDt = new Date(dt);
        var month = tmpDt.getMonth() + 1;
        var day = tmpDt.getDate();
        var monthStr = (month < 10 ? '0' : '') + month;
        var dayStr = (day < 10 ? '0' : '') + day;
        return tmpDt.getFullYear() + '-' + monthStr + '-' + dayStr;
    };
    RssDataPickerComponent.prototype.submit = function () {
        this.params.closeCallback([this.selectedDateOption, this.selectedDate1, this.selectedDate2]);
    };
    RssDataPickerComponent.prototype.cancel = function () {
        this.params.closeCallback();
    };
    RssDataPickerComponent = __decorate([
        core_1.Component({
            moduleId: module.id,
            templateUrl: "./rss-date-picker.component.html",
            styleUrls: ['./rss-date-picker.component.common.css'],
        }),
        __metadata("design:paramtypes", [modal_dialog_1.ModalDialogParams, page_1.Page])
    ], RssDataPickerComponent);
    return RssDataPickerComponent;
}());
exports.RssDataPickerComponent = RssDataPickerComponent;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicnNzLWRhdGUtcGlja2VyLmNvbXBvbmVudC5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbInJzcy1kYXRlLXBpY2tlci5jb21wb25lbnQudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7QUFBQSxzQ0FBNEQ7QUFDNUQsa0VBQXNFO0FBRXRFLGdDQUErQjtBQVEvQjtJQWFJLGdDQUFvQixNQUF5QixFQUFVLElBQVU7UUFBakUsaUJBWUM7UUFabUIsV0FBTSxHQUFOLE1BQU0sQ0FBbUI7UUFBVSxTQUFJLEdBQUosSUFBSSxDQUFNO1FBQzdELElBQUksQ0FBQyxXQUFXLEdBQUcsSUFBSSxJQUFJLEVBQUUsQ0FBQztRQUU5QixJQUFJLENBQUMsV0FBVyxHQUFHLENBQUMsSUFBSSxFQUFFLGNBQWMsRUFBRSxhQUFhLEVBQUUsU0FBUyxDQUFDLENBQUM7UUFDcEUsSUFBSSxDQUFDLGtCQUFrQixHQUFHLElBQUksQ0FBQztRQUMvQixJQUFJLENBQUMsdUJBQXVCLEdBQUcsT0FBTyxDQUFDO1FBRXZDLElBQUksQ0FBQyxJQUFJLENBQUMsRUFBRSxDQUFDLFVBQVUsRUFBRTtZQUNyQiw2RUFBNkU7WUFDN0Usd0NBQXdDO1lBQ3hDLEtBQUksQ0FBQyxNQUFNLENBQUMsYUFBYSxFQUFFLENBQUM7UUFDaEMsQ0FBQyxDQUFDLENBQUM7SUFDUCxDQUFDO0lBRUQseUNBQVEsR0FBUjtRQUVJLElBQUksQ0FBQyxVQUFVLEdBQWUsSUFBSSxDQUFDLElBQUksQ0FBQyxXQUFXLENBQWEsWUFBWSxDQUFDLENBQUM7UUFDOUUsSUFBSSxDQUFDLFVBQVUsQ0FBQyxJQUFJLEdBQUcsSUFBSSxDQUFDLFdBQVcsQ0FBQyxXQUFXLEVBQUUsQ0FBQztRQUN0RCxJQUFJLENBQUMsVUFBVSxDQUFDLEtBQUssR0FBRyxJQUFJLENBQUMsV0FBVyxDQUFDLFFBQVEsRUFBRSxHQUFHLENBQUMsQ0FBQztRQUN4RCxJQUFJLENBQUMsVUFBVSxDQUFDLEdBQUcsR0FBRyxJQUFJLENBQUMsV0FBVyxDQUFDLE9BQU8sRUFBRSxDQUFDO1FBQ2pELElBQUksQ0FBQyxVQUFVLENBQUMsT0FBTyxHQUFHLElBQUksSUFBSSxDQUFDLElBQUksRUFBRSxDQUFDLEVBQUUsRUFBRSxDQUFDLENBQUM7UUFDaEQsSUFBSSxDQUFDLFVBQVUsQ0FBQyxPQUFPLEdBQUcsSUFBSSxJQUFJLENBQUMsSUFBSSxFQUFFLENBQUMsRUFBRSxFQUFFLENBQUMsQ0FBQztJQUVwRCxDQUFDO0lBRU0scURBQW9CLEdBQTNCLFVBQTRCLElBQUk7UUFDNUIsSUFBSSxNQUFNLEdBQWUsSUFBSSxDQUFDLE1BQU0sQ0FBQztRQUNyQyxJQUFJLENBQUMsa0JBQWtCLEdBQUcsSUFBSSxDQUFDLFdBQVcsQ0FBQyxNQUFNLENBQUMsYUFBYSxDQUFDLENBQUM7SUFDckUsQ0FBQztJQUVNLDZDQUFZLEdBQW5CLFVBQW9CLEVBQUU7UUFDbEIsSUFBSSxDQUFDLHVCQUF1QixHQUFHLEVBQUUsQ0FBQztJQUN0QyxDQUFDO0lBRUQsOENBQWEsR0FBYixVQUFjLElBQUk7UUFFZCxFQUFFLENBQUEsQ0FBQyxJQUFJLENBQUMsdUJBQXVCLEtBQUcsT0FBTyxDQUFDLENBQUEsQ0FBQztZQUN2QyxJQUFJLENBQUMsYUFBYSxHQUFHLElBQUksQ0FBQyxXQUFXLENBQUMsSUFBSSxDQUFDLEtBQUssQ0FBQyxDQUFDO1FBQ3RELENBQUM7UUFBQSxJQUFJLENBQUEsQ0FBQztZQUNGLElBQUksQ0FBQyxhQUFhLEdBQUcsSUFBSSxDQUFDLFdBQVcsQ0FBRSxJQUFJLENBQUMsS0FBSyxDQUFDLENBQUM7UUFDdkQsQ0FBQztJQUNMLENBQUM7SUFFRCw0Q0FBVyxHQUFYLFVBQVksRUFBRTtRQUNWLElBQUksS0FBSyxHQUFHLElBQUksSUFBSSxDQUFDLEVBQUUsQ0FBQyxDQUFDO1FBRXpCLElBQUksS0FBSyxHQUFHLEtBQUssQ0FBQyxRQUFRLEVBQUUsR0FBRyxDQUFDLENBQUM7UUFDakMsSUFBSSxHQUFHLEdBQUcsS0FBSyxDQUFDLE9BQU8sRUFBRSxDQUFDO1FBRTFCLElBQUksUUFBUSxHQUFHLENBQUMsS0FBSyxHQUFDLEVBQUUsR0FBQyxHQUFHLEdBQUMsRUFBRSxDQUFDLEdBQUcsS0FBSyxDQUFDO1FBQ3pDLElBQUksTUFBTSxHQUFFLENBQUMsR0FBRyxHQUFDLEVBQUUsR0FBQyxHQUFHLEdBQUMsRUFBRSxDQUFDLEdBQUMsR0FBRyxDQUFDO1FBRWhDLE1BQU0sQ0FBQyxLQUFLLENBQUMsV0FBVyxFQUFFLEdBQUMsR0FBRyxHQUFFLFFBQVEsR0FBRSxHQUFHLEdBQUUsTUFBTSxDQUFDO0lBQzFELENBQUM7SUFFTSx1Q0FBTSxHQUFiO1FBQ0ksSUFBSSxDQUFDLE1BQU0sQ0FBQyxhQUFhLENBQUMsQ0FBQyxJQUFJLENBQUMsa0JBQWtCLEVBQUUsSUFBSSxDQUFDLGFBQWEsRUFBRSxJQUFJLENBQUMsYUFBYSxDQUFDLENBQUMsQ0FBQztJQUNqRyxDQUFDO0lBRU0sdUNBQU0sR0FBYjtRQUNJLElBQUksQ0FBQyxNQUFNLENBQUMsYUFBYSxFQUFFLENBQUM7SUFDaEMsQ0FBQztJQTFFUSxzQkFBc0I7UUFMbEMsZ0JBQVMsQ0FBQztZQUNQLFFBQVEsRUFBRSxNQUFNLENBQUMsRUFBRTtZQUNuQixXQUFXLEVBQUUsa0NBQWtDO1lBQy9DLFNBQVMsRUFBRSxDQUFDLHdDQUF3QyxDQUFDO1NBQ3hELENBQUM7eUNBYzhCLGdDQUFpQixFQUFnQixXQUFJO09BYnhELHNCQUFzQixDQTJFbEM7SUFBRCw2QkFBQztDQUFBLEFBM0VELElBMkVDO0FBM0VZLHdEQUFzQiIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IENvbXBvbmVudCwgT25Jbml0LCBOZ01vZHVsZSB9IGZyb20gXCJAYW5ndWxhci9jb3JlXCI7XG5pbXBvcnQgeyBNb2RhbERpYWxvZ1BhcmFtcyB9IGZyb20gXCJuYXRpdmVzY3JpcHQtYW5ndWxhci9tb2RhbC1kaWFsb2dcIjtcbmltcG9ydCB7IERhdGVQaWNrZXIgfSBmcm9tIFwidWkvZGF0ZS1waWNrZXJcIjtcbmltcG9ydCB7IFBhZ2UgfSBmcm9tIFwidWkvcGFnZVwiO1xuaW1wb3J0IHsgTGlzdFBpY2tlciB9IGZyb20gXCJ1aS9saXN0LXBpY2tlclwiO1xuXG5AQ29tcG9uZW50KHtcbiAgICBtb2R1bGVJZDogbW9kdWxlLmlkLFxuICAgIHRlbXBsYXRlVXJsOiBcIi4vcnNzLWRhdGUtcGlja2VyLmNvbXBvbmVudC5odG1sXCIsXG4gICAgc3R5bGVVcmxzOiBbJy4vcnNzLWRhdGUtcGlja2VyLmNvbXBvbmVudC5jb21tb24uY3NzJ10sXG59KVxuZXhwb3J0IGNsYXNzIFJzc0RhdGFQaWNrZXJDb21wb25lbnQgaW1wbGVtZW50cyBPbkluaXR7XG5cbiAgICBwdWJsaWMgY3VycmVudGRhdGU6IERhdGU7XG4gICAgZGF0ZVBpY2tlcjogRGF0ZVBpY2tlcjtcblxuICAgIGRhdGVPcHRpb25zOiBzdHJpbmdbXTtcblxuICAgIHNlbGVjdGVkRGF0ZU9wdGlvbjpzdHJpbmc7XG4gICAgY3VycmVudFNlbGVjdGVkRGF0ZVR5cGU6IHN0cmluZztcblxuICAgIHNlbGVjdGVkRGF0ZTE6c3RyaW5nO1xuICAgIHNlbGVjdGVkRGF0ZTI6c3RyaW5nO1xuXG4gICAgY29uc3RydWN0b3IocHJpdmF0ZSBwYXJhbXM6IE1vZGFsRGlhbG9nUGFyYW1zLCBwcml2YXRlIHBhZ2U6IFBhZ2UpIHtcbiAgICAgICAgdGhpcy5jdXJyZW50ZGF0ZSA9IG5ldyBEYXRlKCk7XG5cbiAgICAgICAgdGhpcy5kYXRlT3B0aW9ucyA9IFtcIk9uXCIsIFwiT24gb3IgQmVmb3JlXCIsIFwiT24gT3IgQWZ0ZXJcIiwgXCJCZXR3ZWVuXCJdO1xuICAgICAgICB0aGlzLnNlbGVjdGVkRGF0ZU9wdGlvbiA9ICdPbic7XG4gICAgICAgIHRoaXMuY3VycmVudFNlbGVjdGVkRGF0ZVR5cGUgPSBcImRhdGUxXCI7XG5cbiAgICAgICAgdGhpcy5wYWdlLm9uKFwidW5sb2FkZWRcIiwgKCkgPT4ge1xuICAgICAgICAgICAgLy8gdXNpbmcgdGhlIHVubG9hZGVkIGV2ZW50IHRvIGNsb3NlIHRoZSBtb2RhbCB3aGVuIHRoZXJlIGlzIHVzZXIgaW50ZXJhY3Rpb25cbiAgICAgICAgICAgIC8vIGUuZy4gdXNlciB0YXBzIG91dHNpZGUgdGhlIG1vZGFsIHBhZ2VcbiAgICAgICAgICAgIHRoaXMucGFyYW1zLmNsb3NlQ2FsbGJhY2soKTtcbiAgICAgICAgfSk7XG4gICAgfVxuXG4gICAgbmdPbkluaXQoKXtcblxuICAgICAgICB0aGlzLmRhdGVQaWNrZXIgPSA8RGF0ZVBpY2tlcj50aGlzLnBhZ2UuZ2V0Vmlld0J5SWQ8RGF0ZVBpY2tlcj4oXCJkYXRlUGlja2VyXCIpO1xuICAgICAgICB0aGlzLmRhdGVQaWNrZXIueWVhciA9IHRoaXMuY3VycmVudGRhdGUuZ2V0RnVsbFllYXIoKTtcbiAgICAgICAgdGhpcy5kYXRlUGlja2VyLm1vbnRoID0gdGhpcy5jdXJyZW50ZGF0ZS5nZXRNb250aCgpICsgMTtcbiAgICAgICAgdGhpcy5kYXRlUGlja2VyLmRheSA9IHRoaXMuY3VycmVudGRhdGUuZ2V0RGF0ZSgpO1xuICAgICAgICB0aGlzLmRhdGVQaWNrZXIubWluRGF0ZSA9IG5ldyBEYXRlKDE5NzUsIDAsIDI5KTtcbiAgICAgICAgdGhpcy5kYXRlUGlja2VyLm1heERhdGUgPSBuZXcgRGF0ZSgyMDQ1LCA0LCAxMik7XG5cbiAgICB9XG5cbiAgICBwdWJsaWMgc2VsZWN0ZWRJbmRleENoYW5nZWQoYXJncykge1xuICAgICAgICBsZXQgcGlja2VyID0gPExpc3RQaWNrZXI+YXJncy5vYmplY3Q7XG4gICAgICAgIHRoaXMuc2VsZWN0ZWREYXRlT3B0aW9uID0gdGhpcy5kYXRlT3B0aW9uc1twaWNrZXIuc2VsZWN0ZWRJbmRleF07XG4gICAgfVxuXG4gICAgcHVibGljIHNob3dDYWxlbmRhcihkdCl7XG4gICAgICAgIHRoaXMuY3VycmVudFNlbGVjdGVkRGF0ZVR5cGUgPSBkdDtcbiAgICB9XG5cbiAgICBvbkRhdGVDaGFuZ2VkKGFyZ3MpIHtcblxuICAgICAgICBpZih0aGlzLmN1cnJlbnRTZWxlY3RlZERhdGVUeXBlPT09J2RhdGUxJyl7XG4gICAgICAgICAgICB0aGlzLnNlbGVjdGVkRGF0ZTEgPSB0aGlzLl9mb3JtYXREYXRlKGFyZ3MudmFsdWUpO1xuICAgICAgICB9ZWxzZXtcbiAgICAgICAgICAgIHRoaXMuc2VsZWN0ZWREYXRlMiA9IHRoaXMuX2Zvcm1hdERhdGUoIGFyZ3MudmFsdWUpO1xuICAgICAgICB9XG4gICAgfVxuXG4gICAgX2Zvcm1hdERhdGUoZHQpe1xuICAgICAgICBsZXQgdG1wRHQgPSBuZXcgRGF0ZShkdCk7XG5cbiAgICAgICAgbGV0IG1vbnRoID0gdG1wRHQuZ2V0TW9udGgoKSArIDE7XG4gICAgICAgIGxldCBkYXkgPSB0bXBEdC5nZXREYXRlKCk7XG5cbiAgICAgICAgbGV0IG1vbnRoU3RyID0gKG1vbnRoPDEwPycwJzonJykgKyBtb250aDtcbiAgICAgICAgbGV0IGRheVN0cj0gKGRheTwxMD8nMCc6JycpK2RheTtcblxuICAgICAgICByZXR1cm4gdG1wRHQuZ2V0RnVsbFllYXIoKSsnLScrIG1vbnRoU3RyICsnLScrIGRheVN0cjtcbiAgICB9XG5cbiAgICBwdWJsaWMgc3VibWl0KCkge1xuICAgICAgICB0aGlzLnBhcmFtcy5jbG9zZUNhbGxiYWNrKFt0aGlzLnNlbGVjdGVkRGF0ZU9wdGlvbiwgdGhpcy5zZWxlY3RlZERhdGUxLCB0aGlzLnNlbGVjdGVkRGF0ZTJdKTtcbiAgICB9XG5cbiAgICBwdWJsaWMgY2FuY2VsKCl7XG4gICAgICAgIHRoaXMucGFyYW1zLmNsb3NlQ2FsbGJhY2soKTtcbiAgICB9XG59XG4iXX0=